# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          PGHOST: localhost
          PGUSER: bpals
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
          BUNDLER_VERSION: 2.0.2

      - image: postgres:9.6.3
        environment:
          POSTGRES_USER: bpals
          POSTGRES_DB: bpals_test
          POSTGRES_PASSWORD: ""

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: setup bundler
          command: |
            sudo gem update --system
            sudo gem uninstall bundler
            sudo rm /usr/local/bin/bundle
            sudo rm /usr/local/bin/bundler
            sudo gem install bundler

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle


      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      #Database setup
      # - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      # - run: yarn
      # - run: bundle exec rake db:setup

      # run tests!
      #- run:
      #    name: Rspec
      #    command: bundle exec rspec

      # collect reports
      #- store_test_results:
      #    path: /tmp/test-results
      #- store_artifacts:
      #    path: /tmp/test-results
      #    destination: test-results

      #- add_ssh_keys:
      #    fingerprints:
      #      - "61:15:82:74:49:7f:72:da:ed:d4:b8:2b:d5:a6:41:77"

      - deploy:
          name: Capistranoデプロイ
          command: ssh ${HOST_USER}@${HOST_NAME} "bundle exec cap production deploy"
